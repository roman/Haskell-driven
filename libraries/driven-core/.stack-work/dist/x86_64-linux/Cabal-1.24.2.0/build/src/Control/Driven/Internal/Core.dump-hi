
==================== FINAL INTERFACE ====================
2017-06-02 05:46:55.195163 UTC

interface driven-core-0.0.0.1-8Ptpkov9QLzETutHwI3QHl:Control.Driven.Internal.Core 8002
  interface hash: 9100873cc740e23b64622a799d7cf6e0
  ABI hash: c986d246af2835168597a91bb00f7905
  export-list hash: f2aa10f8ce92b37d7da474f9860eb37f
  orphan hash: 2826afa95f27bac80172a3570f225b2f
  flag hash: 96e1a2009e88ed7e968eef3df0561f08
  sig of: Nothing
  used TH splices: False
  where
exports:
  Control.Driven.Internal.Core.collectOutputsPerEventName
  Control.Driven.Internal.Core.createInputMap
  Control.Driven.Internal.Core.createOutputMap
  Control.Driven.Internal.Core.createSchemaMap
  Control.Driven.Internal.Core.createWorkersPerEvent
  Control.Driven.Internal.Core.startSystem
  Control.Driven.Internal.Core.stopSystem
  Control.Driven.Internal.Core.DrivenRuntime{Control.Driven.Internal.Core.DrivenRuntime runtimeEventWorkers runtimeInputs runtimeOutputs}
module dependencies: Control.Driven.Internal.Backend.Memory
                     Control.Driven.Internal.Types Control.Driven.Internal.Worker
package dependencies: aeson-1.0.2.1@aeson-1.0.2.1-I9AyiKnSyfEHxczxWPq1iV
                      array-0.5.1.1@array-0.5.1.1
                      async-2.1.1.1@async-2.1.1.1-8yywY4inVGRLJSCg60gBXj
                      attoparsec-0.13.1.0@attoparsec-0.13.1.0-ECR7lrm2wO64uP6OW8ZTCi
                      base-4.9.1.0
                      base-compat-0.9.3@base-compat-0.9.3-KeJp8zYMpcS9WibvTcxU22
                      binary-0.8.3.0@binary-0.8.3.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0
                      dlist-0.8.0.2@dlist-0.8.0.2-6Wnps4GD7EFnRucVzXIFD
                      ghc-boot-th-8.0.2@ghc-boot-th-8.0.2 ghc-prim-0.5.0.0
                      hashable-1.2.6.0@hashable-1.2.6.0-3EXxoqeEgbfAKr6aGkye6x
                      integer-gmp-1.0.0.1
                      integer-logarithms-1.0.1@integer-logarithms-1.0.1-IEHCuEd5sG4JjSjlx7m5JF
                      mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6
                      primitive-0.6.1.0@primitive-0.6.1.0-6AbSTw9JXz141LE5p6LGH
                      protolude-0.1.10@protolude-0.1.10-6KZ4RB9zWepBfYwAkgb4xb
                      safe-0.3.14@safe-0.3.14-GsbXn9D9F3BDazVNcErzdQ
                      scientific-0.3.4.13@scientific-0.3.4.13-2xII4ZQfmEWrTXn2dbZc3
                      stm-2.4.4.1@stm-2.4.4.1-JQn4hNPyYjP5m9AcbI88Ve
                      tagged-0.8.5@tagged-0.8.5-1mTloBSoUxv8dqUr8XBGBt
                      template-haskell-2.11.1.0
                      text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR
                      time-1.6.0.1@time-1.6.0.1
                      time-locale-compat-0.1.1.3@time-locale-compat-0.1.1.3-KZ1jqNx8uhlHjmuPPj6V1Y
                      transformers-0.5.2.0@transformers-0.5.2.0
                      unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-1XEErQCPPPc2SEtcHHNx9o
                      vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG
orphans: attoparsec-0.13.1.0@attoparsec-0.13.1.0-ECR7lrm2wO64uP6OW8ZTCi:Data.Attoparsec.ByteString.Char8
         attoparsec-0.13.1.0@attoparsec-0.13.1.0-ECR7lrm2wO64uP6OW8ZTCi:Data.Attoparsec.Text.Internal
         base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         hashable-1.2.6.0@hashable-1.2.6.0-3EXxoqeEgbfAKr6aGkye6x:Data.Hashable.Generic
         stm-2.4.4.1@stm-2.4.4.1-JQn4hNPyYjP5m9AcbI88Ve:Control.Monad.STM
         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text
         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text.Lazy
         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text.Show
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector.Fusion.Bundle
         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector.Unboxed
family instance modules: attoparsec-0.13.1.0@attoparsec-0.13.1.0-ECR7lrm2wO64uP6OW8ZTCi:Data.Attoparsec.Internal.Types
                         base-4.9.1.0:Control.Applicative base-4.9.1.0:Data.Complex
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Compose
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.Functor.Product base-4.9.1.0:Data.Functor.Sum
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         dlist-0.8.0.2@dlist-0.8.0.2-6Wnps4GD7EFnRucVzXIFD:Data.DList
                         driven-core-0.0.0.1-8Ptpkov9QLzETutHwI3QHl:Control.Driven.Internal.Types
                         ghc-boot-th-8.0.2@ghc-boot-th-8.0.2:GHC.LanguageExtensions.Type
                         primitive-0.6.1.0@primitive-0.6.1.0-6AbSTw9JXz141LE5p6LGH:Control.Monad.Primitive
                         tagged-0.8.5@tagged-0.8.5-1mTloBSoUxv8dqUr8XBGBt:Data.Tagged
                         template-haskell-2.11.1.0:Language.Haskell.TH.Syntax
                         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text
                         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text.Lazy
                         unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-1XEErQCPPPc2SEtcHHNx9o:Data.HashMap.Base
                         unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-1XEErQCPPPc2SEtcHHNx9o:Data.HashSet
                         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector
                         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector.Primitive
                         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector.Storable
                         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector.Unboxed
                         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector.Unboxed.Base
import  -/  base-4.9.1.0:Control.Monad a6784c5dab0d75c63dabec5a37843f98
import  -/  base-4.9.1.0:Data.Foldable 3e0b6967a1da89945d0e2d47266337a2
import  -/  base-4.9.1.0:Data.Maybe d876c4ffe4b3c43755a781e8ad860d88
import  -/  base-4.9.1.0:Data.Traversable 556020d7cf3c4a34a774600512918a37
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  Control.Driven.Internal.Backend.Memory a56f08c77007dde7ea4faa7ad25fbf9b
  exports: 659d699563032ad32bb7e8c9ad165f21
  memoryBackend 1bc5917ba993ecb3fd307a79f327dd4b
import  -/  Control.Driven.Internal.Types 5c4a06bc351cb1f8c80518b06a68e39e
  exports: 2adea4d3073c5763dff56ce42ab5bf83
  Backend e5d5e540c49f5cde225836de44e851f0
  BackendName 286a5a417fbbd0bed622309e79da04f9
  BackendNameNotFound 2712df1bb3f6f70ae1efd1889a5e7557
  DrivenConfig 3974eea9c862d65f4f1b7dc1d4115673
  DrivenEvent 15f2f270f1b03978957add1ffc351d82
  EventName 6d2f32305397908255a8ef249245e556
  EventSpec 64931fe42caf63984143235cda07523d
  Input 07c5db433007c33ab6723e2de7345e09
  InputName 7b03278dbef4bc2426426b6def0d6dbf
  InputSpec 0c6ba8ca6e07280f78c5e48f6b7f2c67
  InvalidSchemaTypeForEvent 34fc150c7f8c6db80c52023c63937721
  Output ebbaf2739ceeba808632e89e3c5cddc9
  OutputName 5592a3ffea76be5d645838ae0c55ca43
  OutputNameNotFound cb7c4a656c5d3eb2a4639a6b034639cc
  OutputSpec 73182b28f787cb21509978ece3b11313
  Schema 2e2b39acf2de6117b004e04c598c9226
  SchemaSpec d7895f0d92543c689be94a951de08784
  SomeEventHandler 3c3a07b64cf4a1a16fff1c9f3e0d5b9c
  Worker 7bd02ff62979e15e7c96f0dbd073c4f1
  createInput 94feee28f4e560382c4571107c6c0b6d
  createOutput 792608e5af2cf9db7b32d973ba2eb971
  disposeInput 373a88a9c9905565f4ce05a878f25673
  disposeOutput 65301ef3f3e3d8d8a47543f0bc18b152
  disposeWorker 47d9fe3a53645267bf6284115c2c71a0
  drivenEvents 60aed5e3dc4144567e2eb0d16395b283
  drivenInputs 1cd6d879d761bbcb715084e6dc0a42e1
  drivenOutputs 0071cbba4287a68c8510ae4a81d2e5ef
  esOutputNames 36834c4e6ac8e86d1c1a200c53499354
  esSchema fad90ddd11c8d0424da7c0b16560eb14
  esWorkerSpecs 253e5ebcb8fff3ae81f2e09c7b70b0d4
  isBackendName 7fedb3607a6bc09e5e6d67c339119ee0
  isName e284d3b6512b390921866000fc2571b3
  osBackendName ebae2057053e438fdaf78956ad3e4a56
  osName bd5893224ca1c561de3a4f02d4daea62
import  -/  Control.Driven.Internal.Worker db7bf70f572e37e3690421d039d50b39
  exports: 92b948e342dcba36df4c112423e8890a
  createWorker 083ecb7dc26667a064afb79af457663a
  workerHandler 2efe3a00833eeecd5cecd8e0cedc0362
import  -/  ghc-prim-0.5.0.0:GHC.Types 89f8de4f08018c9177c98d979eae0e45
import  -/  protolude-0.1.10@protolude-0.1.10-6KZ4RB9zWepBfYwAkgb4xb:Protolude 1929b0698105a8ab90ed86f9f058e9f1
import  -/  text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text.Internal a2f6f66c5bb1247458d9fa25257ab188
import  -/  unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-1XEErQCPPPc2SEtcHHNx9o:Data.HashMap.Base d664aa0b8c45e9ac3b50dc55559472c9
import  -/  unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-1XEErQCPPPc2SEtcHHNx9o:Data.HashMap.Strict a9adcc2dfb56213277aa64e8e80de7ad
0b10ae641055c9675b45df6c4eeebd62
  $s$wupdateOrConcatWithKey ::
    (Data.Text.Internal.Text -> v -> v -> v)
    -> GHC.Prim.Array#
         (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
    -> GHC.Prim.Array#
         (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
    -> GHC.Prim.Array#
         (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
  {- Arity: 3, Strictness: <L,C(C1(C1(U)))><S,U><S,U>, Inline: [0],
     Unfolding: (\ @ v
                   (w1 :: Data.Text.Internal.Text -> v -> v -> v)
                   (ww :: GHC.Prim.Array#
                            (Data.HashMap.Base.Leaf Data.Text.Internal.Text v))
                   (ww1 :: GHC.Prim.Array#
                             (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)) ->
                 let {
                   wild1 :: GHC.Prim.Int#
                   = GHC.Prim.sizeofArray#
                       @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                       ww1
                 } in
                 case GHC.Prim.newArray#
                        @ (GHC.Base.Maybe GHC.Types.Int)
                        @ GHC.Prim.RealWorld
                        wild1
                        (Data.HashMap.Array.undefinedElem @ (GHC.Base.Maybe GHC.Types.Int))
                        GHC.Prim.realWorld# of ds { (#,#) ipv ipv1 ->
                 letrec {
                   $s$wgo13 :: GHC.Prim.State# GHC.Prim.RealWorld
                               -> GHC.Prim.Int#
                               -> GHC.Prim.Int#
                               -> GHC.Prim.MutableArray#
                                    GHC.Prim.RealWorld (GHC.Base.Maybe GHC.Types.Int)
                               -> GHC.Prim.Array#
                                    (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                               -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                     Data.HashMap.Array.MArray
                                       GHC.Prim.RealWorld (GHC.Base.Maybe GHC.Types.Int) #)
                     {- Arity: 5, Strictness: <S,U><S,U><S,U><L,U><L,U> -}
                   = \ (sc :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot]
                       (sc1 :: GHC.Prim.Int#)
                       (sc2 :: GHC.Prim.Int#)
                       (sc3 :: GHC.Prim.MutableArray#
                                 GHC.Prim.RealWorld (GHC.Base.Maybe GHC.Types.Int))
                       (sc4 :: GHC.Prim.Array#
                                 (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)) ->
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.>=# sc2 sc1) of wild2 {
                       GHC.Types.False
                       -> case GHC.Prim.writeArray#
                                 @ GHC.Prim.RealWorld
                                 @ (GHC.Base.Maybe GHC.Types.Int)
                                 sc3
                                 sc2
                                 (case GHC.Prim.indexArray#
                                         @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                                         sc4
                                         sc2 of ds1 { Unit# ipv2 ->
                                  case ipv2 of wild5 { Data.HashMap.Base.L k1 ds3 ->
                                  case k1 of ww2 { Data.Text.Internal.Text ww3 ww4 ww5 ->
                                  Control.Driven.Internal.Core.$wpoly_go1
                                    @ v
                                    ww3
                                    ww4
                                    ww5
                                    ww
                                    0#
                                    (GHC.Prim.sizeofArray#
                                       @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                                       ww) } } })
                                 sc of s' { DEFAULT ->
                          $s$wgo13 s' sc1 (GHC.Prim.+# sc2 1#) sc3 sc4 }
                       GHC.Types.True
                       -> (# sc,
                             Data.HashMap.Array.MArray
                               @ GHC.Prim.RealWorld
                               @ (GHC.Base.Maybe GHC.Types.Int)
                               sc3 #) }
                 } in
                 case $s$wgo13 ipv wild1 0# ipv1 ww1 of ds1 { (#,#) ipv2 ipv3 ->
                 case ipv3 of wild { Data.HashMap.Array.MArray ds2 ->
                 case GHC.Prim.unsafeFreezeArray#
                        @ GHC.Prim.RealWorld
                        @ (GHC.Base.Maybe GHC.Types.Int)
                        ds2
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 case Control.Driven.Internal.Core.$s$wupdateOrConcatWithKey_$s$wgo1
                        0#
                        0#
                        (GHC.Prim.sizeofArray# @ (GHC.Base.Maybe GHC.Types.Int) ipv5)
                        ipv5 of ww2 { DEFAULT ->
                 let {
                   n1 :: GHC.Prim.Int#
                   = GHC.Prim.sizeofArray#
                       @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                       ww
                 } in
                 case GHC.Prim.newArray#
                        @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                        @ GHC.Prim.RealWorld
                        (GHC.Prim.+# n1 ww2)
                        (Data.HashMap.Array.undefinedElem
                           @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v))
                        GHC.Prim.realWorld# of ds4 { (#,#) ipv7 ipv8 ->
                 case GHC.Prim.copyArray#
                        @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                        @ GHC.Prim.RealWorld
                        ww
                        0#
                        ipv8
                        0#
                        n1
                        ipv7 of s2 { DEFAULT ->
                 letrec {
                   $wgo2 :: GHC.Prim.Int#
                            -> GHC.Prim.Int#
                            -> GHC.Prim.State# GHC.Prim.RealWorld
                            -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                     {- Arity: 3, Strictness: <L,U><S,U><S,U>, Inline: [0] -}
                   = \ (ww3 :: GHC.Prim.Int#)
                       (ww4 :: GHC.Prim.Int#)
                       (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.>=# ww4 wild1) of wild2 {
                       GHC.Types.False
                       -> case GHC.Prim.indexArray#
                                 @ (GHC.Base.Maybe GHC.Types.Int)
                                 ipv5
                                 ww4 of ds5 { Unit# ipv9 ->
                          case ipv9 of wild3 {
                            GHC.Base.Nothing
                            -> case GHC.Prim.indexArray#
                                      @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                                      ww1
                                      ww4 of ds6 { Unit# ipv10 ->
                               case GHC.Prim.writeArray#
                                      @ GHC.Prim.RealWorld
                                      @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                                      ipv8
                                      ww3
                                      ipv10
                                      w of s' { DEFAULT ->
                               $wgo2 (GHC.Prim.+# ww3 1#) (GHC.Prim.+# ww4 1#) s' } }
                            GHC.Base.Just i3
                            -> case i3 of wild4 { GHC.Types.I# i# ->
                               case GHC.Prim.indexArray#
                                      @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                                      ww
                                      i# of ds6 { Unit# ipv10 ->
                               case ipv10 of wild5 { Data.HashMap.Base.L k1 v1 ->
                               case GHC.Prim.indexArray#
                                      @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                                      ww1
                                      ww4 of ds7 { Unit# ipv6 ->
                               case ipv6 of wild6 { Data.HashMap.Base.L ds8 v2 ->
                               case GHC.Prim.writeArray#
                                      @ GHC.Prim.RealWorld
                                      @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                                      ipv8
                                      i#
                                      (Data.HashMap.Base.L
                                         @ Data.Text.Internal.Text
                                         @ v
                                         k1
                                         (w1 k1 v1 v2))
                                      w of s' { DEFAULT ->
                               $wgo2 ww3 (GHC.Prim.+# ww4 1#) s' } } } } } } } }
                       GHC.Types.True -> (# w, GHC.Tuple.() #) }
                 } in
                 case $wgo2 n1 0# s2 of ds5 { (#,#) ipv9 ipv10 ->
                 case GHC.Prim.unsafeFreezeArray#
                        @ GHC.Prim.RealWorld
                        @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                        ipv8
                        ipv9 of ds6 { (#,#) ipv11 ipv12 ->
                 ipv12 } } } } } } } } }) -}
da711f348a54075ea1484ac3223fcf98
  $s$wupdateOrConcatWithKey_$s$wgo1 ::
    GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Array# (GHC.Base.Maybe GHC.Types.Int)
    -> GHC.Prim.Int#
  {- Arity: 4, HasNoCafRefs, Strictness: <L,U><S,U><S,U><L,U> -}
d2b35034148c6a49b1843542438e85ac
  $sfromList ::
    [(Control.Driven.Internal.Types.EventName, v)]
    -> Data.HashMap.Base.HashMap
         Control.Driven.Internal.Types.EventName v
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ @ v
                   (eta :: [(Control.Driven.Internal.Types.EventName, v)]) ->
                 Control.Driven.Internal.Core.$sfromList1
                   @ v
                   eta
                   (Data.HashMap.Base.Empty
                      @ Control.Driven.Internal.Types.EventName
                      @ v)) -}
6ec4675e702de29024c71214d4938bce
  $sfromList1 ::
    [(Control.Driven.Internal.Types.EventName, v)]
    -> Data.HashMap.Base.HashMap
         Control.Driven.Internal.Types.EventName v
    -> Data.HashMap.Base.HashMap
         Control.Driven.Internal.Types.EventName v
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
929c55dba071039dbb3a1275c7639bbe
  $sinsert_$s$wpoly_go1 ::
    GHC.Prim.Word#
    -> GHC.Prim.Array#
         (Data.HashMap.Base.HashMap Data.Text.Internal.Text v)
    -> GHC.Prim.Int#
    -> v
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> Data.HashMap.Base.HashMap
         Control.Driven.Internal.Types.EventName v
  {- Arity: 8, Strictness: <L,U><L,U><L,U><L,U><L,U><L,U><L,U><S,U>,
     Unfolding: (\ @ v
                   (sc :: GHC.Prim.Word#)
                   (sc1 :: GHC.Prim.Array#
                             (Data.HashMap.Base.HashMap Data.Text.Internal.Text v))
                   (sc2 :: GHC.Prim.Int#)
                   (sc3 :: v)
                   (sc4 :: GHC.Prim.Int#)
                   (sc5 :: GHC.Prim.Int#)
                   (sc6 :: GHC.Prim.ByteArray#)
                   (sc7 :: GHC.Prim.Word#) ->
                 let {
                   m :: GHC.Prim.Word#
                   = GHC.Prim.uncheckedShiftL#
                       1##
                       (GHC.Prim.word2Int#
                          (GHC.Prim.and# (GHC.Prim.uncheckedShiftRL# sc7 sc2) 15##))
                 } in
                 case GHC.Prim.and# sc m of wild {
                   DEFAULT
                   -> let {
                        i# :: GHC.Prim.Int#
                        = GHC.Prim.word2Int#
                            (GHC.Prim.popCnt# (GHC.Prim.and# sc (GHC.Prim.minusWord# m 1##)))
                      } in
                      case GHC.Prim.indexArray#
                             @ (Data.HashMap.Base.HashMap
                                  Control.Driven.Internal.Types.EventName v)
                             sc1
                             i# of ds3 { Unit# ipv2 ->
                      case Control.Driven.Internal.Core.$wpoly_go4
                             @ v
                             sc7
                             sc6
                             sc5
                             sc4
                             sc3
                             (GHC.Prim.+# sc2 4#)
                             ipv2 of st' { DEFAULT ->
                      case GHC.Prim.reallyUnsafePtrEquality#
                             @ (Data.HashMap.Base.HashMap
                                  Control.Driven.Internal.Types.EventName v)
                             st'
                             ipv2 of wild4 {
                        DEFAULT
                        -> case GHC.Prim.thawArray#
                                  @ (Data.HashMap.Base.HashMap
                                       Control.Driven.Internal.Types.EventName v)
                                  @ GHC.Prim.RealWorld
                                  sc1
                                  0#
                                  (GHC.Prim.sizeofArray#
                                     @ (Data.HashMap.Base.HashMap
                                          Control.Driven.Internal.Types.EventName v)
                                     sc1)
                                  GHC.Prim.realWorld# of ds4 { (#,#) ipv3 ipv4 ->
                           case GHC.Prim.writeArray#
                                  @ GHC.Prim.RealWorld
                                  @ (Data.HashMap.Base.HashMap
                                       Control.Driven.Internal.Types.EventName v)
                                  ipv4
                                  i#
                                  st'
                                  ipv3 of s' { DEFAULT ->
                           case GHC.Prim.unsafeFreezeArray#
                                  @ GHC.Prim.RealWorld
                                  @ (Data.HashMap.Base.HashMap
                                       Control.Driven.Internal.Types.EventName v)
                                  ipv4
                                  s' of ds5 { (#,#) ipv5 ipv6 ->
                           Data.HashMap.Base.BitmapIndexed
                             @ Control.Driven.Internal.Types.EventName
                             @ v
                             sc
                             ipv6 } } }
                        1#
                        -> Data.HashMap.Base.BitmapIndexed
                             @ Control.Driven.Internal.Types.EventName
                             @ v
                             sc
                             sc1 } } }
                   0##
                   -> let {
                        wild1 :: GHC.Prim.Int#
                        = GHC.Prim.sizeofArray#
                            @ (Data.HashMap.Base.HashMap
                                 Control.Driven.Internal.Types.EventName v)
                            sc1
                      } in
                      case GHC.Prim.newArray#
                             @ (Data.HashMap.Base.HashMap
                                  Control.Driven.Internal.Types.EventName v)
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.+# wild1 1#)
                             (Data.HashMap.Array.undefinedElem
                                @ (Data.HashMap.Base.HashMap
                                     Control.Driven.Internal.Types.EventName v))
                             GHC.Prim.realWorld# of ds { (#,#) ipv ipv1 ->
                      let {
                        idx :: GHC.Prim.Int#
                        = GHC.Prim.word2Int#
                            (GHC.Prim.popCnt# (GHC.Prim.and# sc (GHC.Prim.minusWord# m 1##)))
                      } in
                      case GHC.Prim.copyArray#
                             @ (Data.HashMap.Base.HashMap
                                  Control.Driven.Internal.Types.EventName v)
                             @ GHC.Prim.RealWorld
                             sc1
                             0#
                             ipv1
                             0#
                             idx
                             ipv of s2 { DEFAULT ->
                      case GHC.Prim.writeArray#
                             @ GHC.Prim.RealWorld
                             @ (Data.HashMap.Base.HashMap
                                  Control.Driven.Internal.Types.EventName v)
                             ipv1
                             idx
                             (Data.HashMap.Base.Leaf
                                @ Control.Driven.Internal.Types.EventName
                                @ v
                                sc7
                                (Data.Text.Internal.Text sc6 sc5 sc4)
                                sc3)
                             s2 of s' { DEFAULT ->
                      case GHC.Prim.copyArray#
                             @ (Data.HashMap.Base.HashMap
                                  Control.Driven.Internal.Types.EventName v)
                             @ GHC.Prim.RealWorld
                             sc1
                             idx
                             ipv1
                             (GHC.Prim.+# idx 1#)
                             (GHC.Prim.-# wild1 idx)
                             s' of s1 { DEFAULT ->
                      case GHC.Prim.unsafeFreezeArray#
                             @ GHC.Prim.RealWorld
                             @ (Data.HashMap.Base.HashMap
                                  Control.Driven.Internal.Types.EventName v)
                             ipv1
                             s1 of ds1 { (#,#) ipv2 ipv3 ->
                      case GHC.Prim.or# sc m of wild2 {
                        DEFAULT
                        -> Data.HashMap.Base.BitmapIndexed
                             @ Control.Driven.Internal.Types.EventName
                             @ v
                             wild2
                             ipv3
                        65535##
                        -> Data.HashMap.Base.Full
                             @ Control.Driven.Internal.Types.EventName
                             @ v
                             ipv3 } } } } } } }) -}
35141e91d0f6d86e8774a5f39bfe213b
  $sunsafeInsert_$s$wpoly_go1 ::
    GHC.Prim.State# s
    -> GHC.Prim.Word#
    -> GHC.Prim.Array#
         (Data.HashMap.Base.HashMap Data.Text.Internal.Text v)
    -> GHC.Prim.Int#
    -> v
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> (# GHC.Prim.State# s,
          Data.HashMap.Base.HashMap
            Control.Driven.Internal.Types.EventName v #)
  {- Arity: 9,
     Strictness: <L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U>,
     Unfolding: (\ @ v
                   @ s
                   (sc :: GHC.Prim.State# s)[OneShot]
                   (sc1 :: GHC.Prim.Word#)
                   (sc2 :: GHC.Prim.Array#
                             (Data.HashMap.Base.HashMap Data.Text.Internal.Text v))
                   (sc3 :: GHC.Prim.Int#)
                   (sc4 :: v)
                   (sc5 :: GHC.Prim.Int#)
                   (sc6 :: GHC.Prim.Int#)
                   (sc7 :: GHC.Prim.ByteArray#)
                   (sc8 :: GHC.Prim.Word#) ->
                 let {
                   m :: GHC.Prim.Word#
                   = GHC.Prim.uncheckedShiftL#
                       1##
                       (GHC.Prim.word2Int#
                          (GHC.Prim.and# (GHC.Prim.uncheckedShiftRL# sc8 sc3) 15##))
                 } in
                 case GHC.Prim.and# sc1 m of wild {
                   DEFAULT
                   -> let {
                        i# :: GHC.Prim.Int#
                        = GHC.Prim.word2Int#
                            (GHC.Prim.popCnt# (GHC.Prim.and# sc1 (GHC.Prim.minusWord# m 1##)))
                      } in
                      case GHC.Prim.indexArray#
                             @ (Data.HashMap.Base.HashMap
                                  Control.Driven.Internal.Types.EventName v)
                             sc2
                             i# of ds3 { Unit# ipv2 ->
                      case Control.Driven.Internal.Core.$wpoly_go6
                             @ s
                             @ v
                             sc8
                             sc7
                             sc6
                             sc5
                             sc4
                             (GHC.Prim.+# sc3 4#)
                             ipv2
                             sc of ds5 { (#,#) ipv5 ipv6 ->
                      case GHC.Prim.unsafeThawArray#
                             @ (Data.HashMap.Base.HashMap
                                  Control.Driven.Internal.Types.EventName v)
                             @ s
                             sc2
                             ipv5 of ds6 { (#,#) ipv7 ipv8 ->
                      case GHC.Prim.writeArray#
                             @ s
                             @ (Data.HashMap.Base.HashMap
                                  Control.Driven.Internal.Types.EventName v)
                             ipv8
                             i#
                             ipv6
                             ipv7 of s' { DEFAULT ->
                      case GHC.Prim.unsafeFreezeArray#
                             @ s
                             @ (Data.HashMap.Base.HashMap
                                  Control.Driven.Internal.Types.EventName v)
                             ipv8
                             s' of ds7 { (#,#) ipv9 ipv10 ->
                      (# ipv9,
                         Data.HashMap.Base.BitmapIndexed
                           @ Control.Driven.Internal.Types.EventName
                           @ v
                           sc1
                           sc2 #) } } } } }
                   0##
                   -> let {
                        wild1 :: GHC.Prim.Int#
                        = GHC.Prim.sizeofArray#
                            @ (Data.HashMap.Base.HashMap
                                 Control.Driven.Internal.Types.EventName v)
                            sc2
                      } in
                      case GHC.Prim.newArray#
                             @ (Data.HashMap.Base.HashMap
                                  Control.Driven.Internal.Types.EventName v)
                             @ s
                             (GHC.Prim.+# wild1 1#)
                             (Data.HashMap.Array.undefinedElem
                                @ (Data.HashMap.Base.HashMap
                                     Control.Driven.Internal.Types.EventName v))
                             sc of ds { (#,#) ipv ipv1 ->
                      let {
                        idx :: GHC.Prim.Int#
                        = GHC.Prim.word2Int#
                            (GHC.Prim.popCnt# (GHC.Prim.and# sc1 (GHC.Prim.minusWord# m 1##)))
                      } in
                      case GHC.Prim.copyArray#
                             @ (Data.HashMap.Base.HashMap
                                  Control.Driven.Internal.Types.EventName v)
                             @ s
                             sc2
                             0#
                             ipv1
                             0#
                             idx
                             ipv of s2 { DEFAULT ->
                      case GHC.Prim.writeArray#
                             @ s
                             @ (Data.HashMap.Base.HashMap
                                  Control.Driven.Internal.Types.EventName v)
                             ipv1
                             idx
                             (Data.HashMap.Base.Leaf
                                @ Control.Driven.Internal.Types.EventName
                                @ v
                                sc8
                                (Data.Text.Internal.Text sc7 sc6 sc5)
                                sc4)
                             s2 of s' { DEFAULT ->
                      case GHC.Prim.copyArray#
                             @ (Data.HashMap.Base.HashMap
                                  Control.Driven.Internal.Types.EventName v)
                             @ s
                             sc2
                             idx
                             ipv1
                             (GHC.Prim.+# idx 1#)
                             (GHC.Prim.-# wild1 idx)
                             s' of s1 { DEFAULT ->
                      case GHC.Prim.unsafeFreezeArray#
                             @ s
                             @ (Data.HashMap.Base.HashMap
                                  Control.Driven.Internal.Types.EventName v)
                             ipv1
                             s1 of ds1 { (#,#) ipv2 ipv3 ->
                      case GHC.Prim.or# sc1 m of wild2 {
                        DEFAULT
                        -> (# ipv2,
                              Data.HashMap.Base.BitmapIndexed
                                @ Control.Driven.Internal.Types.EventName
                                @ v
                                wild2
                                ipv3 #)
                        65535##
                        -> (# ipv2,
                              Data.HashMap.Base.Full
                                @ Control.Driven.Internal.Types.EventName
                                @ v
                                ipv3 #) } } } } } } }) -}
5bfe39e944b740171b82ecc2151261f0
  $tc'DrivenRuntime :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11062240838484976916##
                   10217894539356624464##
                   Control.Driven.Internal.Core.$trModule
                   Control.Driven.Internal.Core.$tc'DrivenRuntime1) -}
4da67f4b691cf4e66bb2dc851b62abfd
  $tc'DrivenRuntime1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'DrivenRuntime"#) -}
1c0bedb6de060bb61ce618be2bd4c8dc
  $tcDrivenRuntime :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   18261536215242004032##
                   12752798801656384895##
                   Control.Driven.Internal.Core.$trModule
                   Control.Driven.Internal.Core.$tcDrivenRuntime1) -}
be3dca7d0e76c97a22c2b90c962b3e8b
  $tcDrivenRuntime1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "DrivenRuntime"#) -}
6c8a9ad80bf4d289ec2fafae56a510bc
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Control.Driven.Internal.Core.$trModule2
                   Control.Driven.Internal.Core.$trModule1) -}
c75df5f4642e800b2d699869917ba1ec
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Control.Driven.Internal.Core"#) -}
f1126fe2ecc37b47f528fd082caf6ffc
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "driven-core-0.0.0.1-8Ptpkov9QLzETutHwI3QHl"#) -}
abff38e714b3849cacc62398f3e96ffb
  $w$s$wupdateOrSnocWithKey ::
    (Data.Text.Internal.Text -> v -> v -> v)
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> v
    -> GHC.Prim.Array#
         (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
    -> GHC.Prim.Array#
         (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
  {- Arity: 6, Strictness: <L,C(C1(C1(U)))><L,U><L,U><L,U><L,U><S,U>,
     Inline: [0],
     Unfolding: (\ @ v
                   (w :: Data.Text.Internal.Text -> v -> v -> v)
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Int#)
                   (w1 :: v)
                   (w2 :: GHC.Prim.Array#
                            (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)) ->
                 letrec {
                   $wgo1 :: GHC.Prim.ByteArray#
                            -> GHC.Prim.Int#
                            -> GHC.Prim.Int#
                            -> v
                            -> GHC.Prim.Array#
                                 (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                            -> GHC.Prim.Int#
                            -> GHC.Prim.Int#
                            -> GHC.Prim.Array#
                                 (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                     {- Arity: 7, Strictness: <L,U><L,U><L,U><L,U><S,U><S,U><S,U>,
                        Inline: [0] -}
                   = \ (ww3 :: GHC.Prim.ByteArray#)
                       (ww4 :: GHC.Prim.Int#)
                       (ww5 :: GHC.Prim.Int#)
                       (w3 :: v)
                       (ww6 :: GHC.Prim.Array#
                                 (Data.HashMap.Base.Leaf Data.Text.Internal.Text v))
                       (ww7 :: GHC.Prim.Int#)
                       (ww8 :: GHC.Prim.Int#) ->
                     let {
                       k2 :: Data.Text.Internal.Text = Data.Text.Internal.Text ww3 ww4 ww5
                     } in
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.>=# ww7 ww8) of wild {
                       GHC.Types.False
                       -> case GHC.Prim.indexArray#
                                 @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                                 ww6
                                 ww7 of ds { Unit# ipv3 ->
                          case ipv3 of wild1 { Data.HashMap.Base.L kx y ->
                          case kx of wild2 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                          case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.==# ww5 dt5) of wild3 {
                            GHC.Types.False
                            -> $wgo1 ww3 ww4 ww5 w3 ww6 (GHC.Prim.+# ww7 1#) ww8
                            GHC.Types.True
                            -> case {__pkg_ccall text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR _hs_text_memcmp GHC.Prim.ByteArray#
                                                                                                                  -> GHC.Prim.Word#
                                                                                                                  -> GHC.Prim.ByteArray#
                                                                                                                  -> GHC.Prim.Word#
                                                                                                                  -> GHC.Prim.Word#
                                                                                                                  -> GHC.Prim.State#
                                                                                                                       GHC.Prim.RealWorld
                                                                                                                  -> (# GHC.Prim.State#
                                                                                                                          GHC.Prim.RealWorld,
                                                                                                                        GHC.Prim.Int# #)}
                                      ww3
                                      (GHC.Prim.int2Word# ww4)
                                      dt3
                                      (GHC.Prim.int2Word# dt4)
                                      (GHC.Prim.int2Word# ww5)
                                      GHC.Prim.realWorld# of wild4 { (#,#) ds11 ds12 ->
                               case GHC.Prim.narrow32Int# ds12 of wild5 {
                                 DEFAULT -> $wgo1 ww3 ww4 ww5 w3 ww6 (GHC.Prim.+# ww7 1#) ww8
                                 0#
                                 -> case GHC.Prim.thawArray#
                                           @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                                           @ GHC.Prim.RealWorld
                                           ww6
                                           0#
                                           (GHC.Prim.sizeofArray#
                                              @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                                              ww6)
                                           GHC.Prim.realWorld# of ds1 { (#,#) ipv4 ipv5 ->
                                    case GHC.Prim.writeArray#
                                           @ GHC.Prim.RealWorld
                                           @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                                           ipv5
                                           ww7
                                           (Data.HashMap.Base.L
                                              @ Data.Text.Internal.Text
                                              @ v
                                              k2
                                              (w k2 w3 y))
                                           ipv4 of s' { DEFAULT ->
                                    case GHC.Prim.unsafeFreezeArray#
                                           @ GHC.Prim.RealWorld
                                           @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                                           ipv5
                                           s' of ds2 { (#,#) ipv6 ipv7 ->
                                    ipv7 } } } } } } } } }
                       GHC.Types.True
                       -> case GHC.Prim.newArray#
                                 @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                                 @ GHC.Prim.RealWorld
                                 (GHC.Prim.+# ww8 1#)
                                 (Data.HashMap.Array.undefinedElem
                                    @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v))
                                 GHC.Prim.realWorld# of ds { (#,#) ipv3 ipv4 ->
                          case GHC.Prim.copyArray#
                                 @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                                 @ GHC.Prim.RealWorld
                                 ww6
                                 0#
                                 ipv4
                                 0#
                                 ww8
                                 ipv3 of s2 { DEFAULT ->
                          case GHC.Prim.writeArray#
                                 @ GHC.Prim.RealWorld
                                 @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                                 ipv4
                                 ww8
                                 (Data.HashMap.Base.L @ Data.Text.Internal.Text @ v k2 w3)
                                 s2 of s' { DEFAULT ->
                          case GHC.Prim.unsafeFreezeArray#
                                 @ GHC.Prim.RealWorld
                                 @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                                 ipv4
                                 s' of ds1 { (#,#) ipv5 ipv6 ->
                          ipv6 } } } } }
                 } in
                 $wgo1
                   ww
                   ww1
                   ww2
                   w1
                   w2
                   0#
                   (GHC.Prim.sizeofArray#
                      @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                      w2)) -}
d033a9144fbc9b153ed40c3e51e58cc6
  $w$sinsert ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> v
    -> Data.HashMap.Base.HashMap
         Control.Driven.Internal.Types.EventName v
    -> Data.HashMap.Base.HashMap
         Control.Driven.Internal.Types.EventName v
  {- Arity: 5, Strictness: <S,U><S,U><S,U><L,U><S,1*U>, Inline: [0],
     Unfolding: (\ @ v
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Int#)
                   (w :: v)
                   (w1 :: Data.HashMap.Base.HashMap
                            Control.Driven.Internal.Types.EventName v) ->
                 case {__pkg_ccall hashable-1.2.6.0@hashable-1.2.6.0-3EXxoqeEgbfAKr6aGkye6x hashable_fnv_hash_offset GHC.Prim.ByteArray#
                                                                                                                     -> GHC.Prim.Int#
                                                                                                                     -> GHC.Prim.Int#
                                                                                                                     -> GHC.Prim.Int#
                                                                                                                     -> GHC.Prim.State#
                                                                                                                          GHC.Prim.RealWorld
                                                                                                                     -> (# GHC.Prim.State#
                                                                                                                             GHC.Prim.RealWorld,
                                                                                                                           GHC.Prim.Int# #)}
                        ww
                        (GHC.Prim.uncheckedIShiftL# ww1 1#)
                        (GHC.Prim.uncheckedIShiftL# ww2 1#)
                        -2578643520546668380#
                        GHC.Prim.realWorld# of wild1 { (#,#) ds1 ds2 ->
                 Control.Driven.Internal.Core.$wpoly_go4
                   @ v
                   (GHC.Prim.int2Word# ds2)
                   ww
                   ww1
                   ww2
                   w
                   0#
                   w1 }) -}
525bd53da2e5b4c7f8286b18662866e4
  $w$slookup ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.HashMap.Base.HashMap
         Control.Driven.Internal.Types.OutputName v
    -> GHC.Base.Maybe v
  {- Arity: 4, HasNoCafRefs, Strictness: <S,U><S,U><S,U><S,1*U>,
     Inline: [0],
     Unfolding: (\ @ v
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Int#)
                   (w :: Data.HashMap.Base.HashMap
                           Control.Driven.Internal.Types.OutputName v) ->
                 case {__pkg_ccall hashable-1.2.6.0@hashable-1.2.6.0-3EXxoqeEgbfAKr6aGkye6x hashable_fnv_hash_offset GHC.Prim.ByteArray#
                                                                                                                     -> GHC.Prim.Int#
                                                                                                                     -> GHC.Prim.Int#
                                                                                                                     -> GHC.Prim.Int#
                                                                                                                     -> GHC.Prim.State#
                                                                                                                          GHC.Prim.RealWorld
                                                                                                                     -> (# GHC.Prim.State#
                                                                                                                             GHC.Prim.RealWorld,
                                                                                                                           GHC.Prim.Int# #)}
                        ww
                        (GHC.Prim.uncheckedIShiftL# ww1 1#)
                        (GHC.Prim.uncheckedIShiftL# ww2 1#)
                        -2578643520546668380#
                        GHC.Prim.realWorld# of wild1 { (#,#) ds1 ds2 ->
                 Control.Driven.Internal.Core.$wpoly_go5
                   @ v
                   (GHC.Prim.int2Word# ds2)
                   ww
                   ww1
                   ww2
                   0#
                   w }) -}
e015c20395f474023218fc7a96032959
  $w$sunsafeInsert ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> v
    -> Data.HashMap.Base.HashMap
         Control.Driven.Internal.Types.EventName v
    -> Data.HashMap.Base.HashMap
         Control.Driven.Internal.Types.EventName v
  {- Arity: 5, Strictness: <S,U><S,U><S,U><L,U><S,1*U>, Inline: [0],
     Unfolding: (\ @ v
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Int#)
                   (w :: v)
                   (w1 :: Data.HashMap.Base.HashMap
                            Control.Driven.Internal.Types.EventName v) ->
                 case {__pkg_ccall hashable-1.2.6.0@hashable-1.2.6.0-3EXxoqeEgbfAKr6aGkye6x hashable_fnv_hash_offset GHC.Prim.ByteArray#
                                                                                                                     -> GHC.Prim.Int#
                                                                                                                     -> GHC.Prim.Int#
                                                                                                                     -> GHC.Prim.Int#
                                                                                                                     -> GHC.Prim.State#
                                                                                                                          GHC.Prim.RealWorld
                                                                                                                     -> (# GHC.Prim.State#
                                                                                                                             GHC.Prim.RealWorld,
                                                                                                                           GHC.Prim.Int# #)}
                        ww
                        (GHC.Prim.uncheckedIShiftL# ww1 1#)
                        (GHC.Prim.uncheckedIShiftL# ww2 1#)
                        -2578643520546668380#
                        GHC.Prim.realWorld# of wild1 { (#,#) ds1 ds2 ->
                 case Control.Driven.Internal.Core.$wpoly_go6
                        @ GHC.Prim.RealWorld
                        @ v
                        (GHC.Prim.int2Word# ds2)
                        ww
                        ww1
                        ww2
                        w
                        0#
                        w1
                        GHC.Prim.realWorld# of ds { (#,#) ipv ipv1 ->
                 ipv1 } }) -}
e0060b6447cfe9a4aa4db027338f32e6
  $wpoly_go1 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Array#
         (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Base.Maybe GHC.Types.Int
  {- Arity: 6, HasNoCafRefs,
     Strictness: <L,U><L,U><L,U><S,U><S,U><S,U>, Inline: [0] -}
7e363d4e65ba213aee47b8e1277e4c83
  $wpoly_go2 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Array#
         (Data.HashMap.Base.Leaf Control.Driven.Internal.Types.OutputName v)
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Base.Maybe v
  {- Arity: 6, HasNoCafRefs,
     Strictness: <L,U><L,U><L,U><S,U><S,U><S,U>, Inline: [0] -}
90fde2bc923fb25bb4e89c0fd4114996
  $wpoly_go3 ::
    GHC.Prim.Int#
    -> Data.HashMap.Base.HashMap Data.Text.Internal.Text v
    -> Data.HashMap.Base.HashMap Data.Text.Internal.Text v
    -> Data.HashMap.Base.HashMap Data.Text.Internal.Text v
  {- Arity: 3, Strictness: <L,U><S,U><S,1*U>, Inline: [0] -}
3eb70fa14c4293f8a79ed9343bab5329
  $wpoly_go4 ::
    GHC.Prim.Word#
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> v
    -> GHC.Prim.Int#
    -> Data.HashMap.Base.HashMap
         Control.Driven.Internal.Types.EventName v
    -> Data.HashMap.Base.HashMap
         Control.Driven.Internal.Types.EventName v
  {- Arity: 7, Strictness: <S,U><L,U><L,U><L,U><L,U><L,U><S,1*U>,
     Inline: [0] -}
ca0181c7a35bd8a0cc5439fe689debc1
  $wpoly_go5 ::
    GHC.Prim.Word#
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.HashMap.Base.HashMap
         Control.Driven.Internal.Types.OutputName v
    -> GHC.Base.Maybe v
  {- Arity: 6, HasNoCafRefs,
     Strictness: <L,U><L,U><L,U><L,U><L,U><S,1*U>, Inline: [0] -}
0f813b5b3e79f53e787bbd4016d33d40
  $wpoly_go6 ::
    GHC.Prim.Word#
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> v
    -> GHC.Prim.Int#
    -> Data.HashMap.Base.HashMap
         Control.Driven.Internal.Types.EventName v
    -> GHC.Prim.State# s
    -> (# GHC.Prim.State# s,
          Data.HashMap.Base.HashMap
            Control.Driven.Internal.Types.EventName v #)
  {- Arity: 8,
     Strictness: <L,U><L,U><L,U><L,U><L,U><L,U><S,1*U><L,U>,
     Inline: [0] -}
87492d827565ebc587a5f6fe9c3a8548
  $wstartSystem ::
    Data.HashMap.Base.HashMap
      Control.Driven.Internal.Types.EventName
      Control.Driven.Internal.Types.EventSpec
    -> [Control.Driven.Internal.Types.InputSpec]
    -> [Control.Driven.Internal.Types.OutputSpec]
    -> (Control.Driven.Internal.Types.DrivenEvent -> GHC.Types.IO ())
    -> Data.HashMap.Base.HashMap
         Data.Text.Internal.Text Control.Driven.Internal.Types.Backend
    -> [Control.Driven.Internal.Types.SchemaSpec]
    -> Data.HashMap.Base.HashMap
         Control.Driven.Internal.Types.EventName
         [Control.Driven.Internal.Types.SomeEventHandler]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Control.Driven.Internal.Core.DrivenRuntime #)
  {- Arity: 8,
     Strictness: <L,1*U><S,1*U><L,1*U><L,U><L,U><L,U><L,U><S,U>,
     Inline: [0],
     Unfolding: (\ (ww :: Data.HashMap.Base.HashMap
                            Control.Driven.Internal.Types.EventName
                            Control.Driven.Internal.Types.EventSpec)
                   (ww1 :: [Control.Driven.Internal.Types.InputSpec])
                   (ww2 :: [Control.Driven.Internal.Types.OutputSpec])
                   (w :: Control.Driven.Internal.Types.DrivenEvent -> GHC.Types.IO ())
                   (w1 :: Data.HashMap.Base.HashMap
                            Data.Text.Internal.Text Control.Driven.Internal.Types.Backend)
                   (w2 :: [Control.Driven.Internal.Types.SchemaSpec])
                   (w3 :: Data.HashMap.Base.HashMap
                            Control.Driven.Internal.Types.EventName
                            [Control.Driven.Internal.Types.SomeEventHandler])
                   (w4 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 let {
                   backendMap :: Data.HashMap.Base.HashMap
                                   Data.Text.Internal.Text Control.Driven.Internal.Types.Backend
                   = Control.Driven.Internal.Core.$wpoly_go3
                       @ Control.Driven.Internal.Types.Backend
                       0#
                       w1
                       Control.Driven.Internal.Core.startSystem2
                 } in
                 case Control.Driven.Internal.Core.createInputMap1
                        w
                        backendMap
                        ww1
                        w4 of ds1 { (#,#) ipv ipv1 ->
                 case Control.Driven.Internal.Core.createOutputMap1
                        w
                        backendMap
                        ipv1
                        ww2
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case Control.Driven.Internal.Core.createSchemaMap1
                        w2
                        ww
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 case Control.Driven.Internal.Core.collectOutputsPerEventName1
                        ww
                        ipv3
                        ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                 case Control.Driven.Internal.Core.createWorkersPerEvent1
                        w
                        ww
                        ipv5
                        ipv1
                        ipv7
                        w3
                        ipv6 of ds5 { (#,#) ipv8 ipv9 ->
                 (# ipv8,
                    Control.Driven.Internal.Core.DrivenRuntime
                      ipv1
                      ipv3
                      ipv9 #) } } } } }) -}
2c8c87dc410e50dbeb1625818567050e
  $wstopSystem ::
    Data.HashMap.Base.HashMap
      Control.Driven.Internal.Types.InputName
      Control.Driven.Internal.Types.Input
    -> Data.HashMap.Base.HashMap
         Control.Driven.Internal.Types.OutputName
         Control.Driven.Internal.Types.Output
    -> Data.HashMap.Base.HashMap
         Control.Driven.Internal.Types.EventName
         [Control.Driven.Internal.Types.Worker]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4, HasNoCafRefs, Strictness: <S,1*U><L,1*U><L,1*U><S,U>,
     Inline: [0],
     Unfolding: (\ (ww :: Data.HashMap.Base.HashMap
                            Control.Driven.Internal.Types.InputName
                            Control.Driven.Internal.Types.Input)
                   (ww1 :: Data.HashMap.Base.HashMap
                             Control.Driven.Internal.Types.OutputName
                             Control.Driven.Internal.Types.Output)
                   (ww2 :: Data.HashMap.Base.HashMap
                             Control.Driven.Internal.Types.EventName
                             [Control.Driven.Internal.Types.Worker])
                   (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case Control.Driven.Internal.Core.stopSystem5
                        Control.Driven.Internal.Core.stopSystem4
                          `cast`
                        (Sym (GHC.Types.N:IO[0] <()>_R))
                        ww
                        w of ds1 { (#,#) ipv ipv1 ->
                 case Control.Driven.Internal.Core.stopSystem3
                        Control.Driven.Internal.Core.stopSystem4
                          `cast`
                        (Sym (GHC.Types.N:IO[0] <()>_R))
                        ww1
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 Control.Driven.Internal.Core.stopSystem2
                   Control.Driven.Internal.Core.stopSystem4
                     `cast`
                   (Sym (GHC.Types.N:IO[0] <()>_R))
                   ww2
                   ipv2 } }) -}
cecd37e3f54c7815dae07eaa7310c646
  data DrivenRuntime
    = DrivenRuntime {runtimeInputs :: Data.HashMap.Base.HashMap
                                        Control.Driven.Internal.Types.InputName
                                        Control.Driven.Internal.Types.Input,
                     runtimeOutputs :: Data.HashMap.Base.HashMap
                                         Control.Driven.Internal.Types.OutputName
                                         Control.Driven.Internal.Types.Output,
                     runtimeEventWorkers :: Data.HashMap.Base.HashMap
                                              Control.Driven.Internal.Types.EventName
                                              [Control.Driven.Internal.Types.Worker]}
c06426902b71353a2d276977f254a3e2
  collectOutputsPerEventName ::
    Data.HashMap.Base.HashMap
      Control.Driven.Internal.Types.EventName
      Control.Driven.Internal.Types.EventSpec
    -> Data.HashMap.Base.HashMap
         Control.Driven.Internal.Types.OutputName
         Control.Driven.Internal.Types.Output
    -> GHC.Types.IO
         (Data.HashMap.Base.HashMap
            Control.Driven.Internal.Types.EventName
            (Control.Driven.Internal.Types.EventSpec,
             [Control.Driven.Internal.Types.Output]))
  {- Arity: 3, Strictness: <S,1*U><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Control.Driven.Internal.Core.collectOutputsPerEventName1
                  `cast`
                (<Data.HashMap.Base.HashMap
                    Control.Driven.Internal.Types.EventName
                    Control.Driven.Internal.Types.EventSpec>_R
                 ->_R <Data.HashMap.Base.HashMap
                         Control.Driven.Internal.Types.OutputName
                         Control.Driven.Internal.Types.Output>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.HashMap.Base.HashMap
                                  Control.Driven.Internal.Types.EventName
                                  (Control.Driven.Internal.Types.EventSpec,
                                   [Control.Driven.Internal.Types.Output])>_R)) -}
d9cc3c306352db1614b862aed9b10c52
  collectOutputsPerEventName1 ::
    Data.HashMap.Base.HashMap
      Control.Driven.Internal.Types.EventName
      Control.Driven.Internal.Types.EventSpec
    -> Data.HashMap.Base.HashMap
         Control.Driven.Internal.Types.OutputName
         Control.Driven.Internal.Types.Output
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.HashMap.Base.HashMap
            Control.Driven.Internal.Types.EventName
            (Control.Driven.Internal.Types.EventSpec,
             [Control.Driven.Internal.Types.Output]) #)
  {- Arity: 3, Strictness: <S,1*U><L,U><S,U>,
     Unfolding: (\ (eventSpecMap :: Data.HashMap.Base.HashMap
                                      Control.Driven.Internal.Types.EventName
                                      Control.Driven.Internal.Types.EventSpec)
                   (allOutputs :: Data.HashMap.Base.HashMap
                                    Control.Driven.Internal.Types.OutputName
                                    Control.Driven.Internal.Types.Output)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 letrec {
                   go2 :: [(Control.Driven.Internal.Types.EventName,
                            Control.Driven.Internal.Types.EventSpec)]
                          -> Data.HashMap.Base.HashMap
                               Control.Driven.Internal.Types.EventName
                               (Control.Driven.Internal.Types.EventSpec,
                                [Control.Driven.Internal.Types.Output])
                          -> GHC.Prim.State# GHC.Prim.RealWorld
                          -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                Data.HashMap.Base.HashMap
                                  Control.Driven.Internal.Types.EventName
                                  (Control.Driven.Internal.Types.EventSpec,
                                   [Control.Driven.Internal.Types.Output]) #)
                     {- Arity: 3, Strictness: <S,1*U><L,U><S,U> -}
                   = \ (ds :: [(Control.Driven.Internal.Types.EventName,
                                Control.Driven.Internal.Types.EventSpec)])
                       (eta1 :: Data.HashMap.Base.HashMap
                                  Control.Driven.Internal.Types.EventName
                                  (Control.Driven.Internal.Types.EventSpec,
                                   [Control.Driven.Internal.Types.Output]))
                       (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                     case ds of wild {
                       [] -> (# eta2, eta1 #)
                       : y ys
                       -> case y of wild1 { (,) evName eventSpec ->
                          case eventSpec of wild2 { Control.Driven.Internal.Types.EventSpec ds1 ds2 ds3 ->
                          letrec {
                            go3 :: [Control.Driven.Internal.Types.OutputName]
                                   -> GHC.Prim.State# GHC.Prim.RealWorld
                                   -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                         [Control.Driven.Internal.Types.Output] #)
                              {- Arity: 2, Strictness: <S,1*U><S,U> -}
                            = \ (ds4 :: [Control.Driven.Internal.Types.OutputName])
                                (eta4 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                              case ds4 of wild3 {
                                []
                                -> (# eta4, GHC.Types.[] @ Control.Driven.Internal.Types.Output #)
                                : y1 ys1
                                -> case y1 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                                   case Control.Driven.Internal.Core.$w$slookup
                                          @ Control.Driven.Internal.Types.Output
                                          ww1
                                          ww2
                                          ww3
                                          allOutputs of wild4 {
                                     GHC.Base.Nothing
                                     -> case GHC.Prim.raiseIO#
                                               @ GHC.Exception.SomeException
                                               @ Control.Driven.Internal.Types.Output
                                               (Control.Driven.Internal.Types.$fExceptionDrivenError_$ctoException
                                                  (Control.Driven.Internal.Types.OutputNameNotFound
                                                     evName
                                                     ww))
                                               eta4
                                        ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                  [Control.Driven.Internal.Types.Output] #)
                                        of {}
                                     GHC.Base.Just x
                                     -> case go3 ys1 eta4 of ds5 { (#,#) ipv2 ipv3 ->
                                        (# ipv2,
                                           GHC.Types.:
                                             @ Control.Driven.Internal.Types.Output
                                             x
                                             ipv3 #) } } } }
                          } in
                          case go3 ds3 eta2 of ds4 { (#,#) ipv ipv1 ->
                          go2
                            ys
                            (case evName of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                             Control.Driven.Internal.Core.$w$sinsert
                               @ (Control.Driven.Internal.Types.EventSpec,
                                  [Control.Driven.Internal.Types.Output])
                               ww1
                               ww2
                               ww3
                               (wild2, ipv1)
                               eta1 })
                            ipv } } } }
                 } in
                 go2
                   (Data.HashMap.Base.toList
                      @ Control.Driven.Internal.Types.EventName
                      @ Control.Driven.Internal.Types.EventSpec
                      eventSpecMap)
                   (Data.HashMap.Base.Empty
                      @ Control.Driven.Internal.Types.EventName
                      @ (Control.Driven.Internal.Types.EventSpec,
                         [Control.Driven.Internal.Types.Output]))
                   eta) -}
3a9aa18fb2dc045b2af7a650e27fa548
  createInputMap ::
    (Control.Driven.Internal.Types.DrivenEvent -> GHC.Types.IO ())
    -> Data.HashMap.Base.HashMap
         Control.Driven.Internal.Types.BackendName
         Control.Driven.Internal.Types.Backend
    -> [Control.Driven.Internal.Types.InputSpec]
    -> GHC.Types.IO
         (Data.HashMap.Base.HashMap
            Control.Driven.Internal.Types.BackendName
            Control.Driven.Internal.Types.Input)
  {- Arity: 4, Strictness: <L,U><L,U><S,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Control.Driven.Internal.Core.createInputMap1
                  `cast`
                (<Control.Driven.Internal.Types.DrivenEvent -> GHC.Types.IO ()>_R
                 ->_R <Data.HashMap.Base.HashMap
                         Control.Driven.Internal.Types.BackendName
                         Control.Driven.Internal.Types.Backend>_R
                 ->_R <[Control.Driven.Internal.Types.InputSpec]>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.HashMap.Base.HashMap
                                  Control.Driven.Internal.Types.InputName
                                  Control.Driven.Internal.Types.Input>_R)) -}
729d3b6a0b9de33600dd03bb3530087c
  createInputMap1 ::
    (Control.Driven.Internal.Types.DrivenEvent -> GHC.Types.IO ())
    -> Data.HashMap.Base.HashMap
         Control.Driven.Internal.Types.BackendName
         Control.Driven.Internal.Types.Backend
    -> [Control.Driven.Internal.Types.InputSpec]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.HashMap.Base.HashMap
            Control.Driven.Internal.Types.InputName
            Control.Driven.Internal.Types.Input #)
  {- Arity: 4, Strictness: <L,U><L,U><S,1*U><S,U>,
     Unfolding: (\ (emitEvent :: Control.Driven.Internal.Types.DrivenEvent
                                 -> GHC.Types.IO ())
                   (backendMap :: Data.HashMap.Base.HashMap
                                    Control.Driven.Internal.Types.BackendName
                                    Control.Driven.Internal.Types.Backend)
                   (inputSpecList :: [Control.Driven.Internal.Types.InputSpec])
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 letrec {
                   go2 :: [Control.Driven.Internal.Types.InputSpec]
                          -> Data.HashMap.Base.HashMap
                               Control.Driven.Internal.Types.InputName
                               Control.Driven.Internal.Types.Input
                          -> GHC.Prim.State# GHC.Prim.RealWorld
                          -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                Data.HashMap.Base.HashMap
                                  Control.Driven.Internal.Types.InputName
                                  Control.Driven.Internal.Types.Input #)
                     {- Arity: 3, Strictness: <S,1*U><L,U><S,U> -}
                   = \ (ds :: [Control.Driven.Internal.Types.InputSpec])
                       (eta1 :: Data.HashMap.Base.HashMap
                                  Control.Driven.Internal.Types.InputName
                                  Control.Driven.Internal.Types.Input)
                       (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                     case ds of wild {
                       [] -> (# eta2, eta1 #)
                       : y ys
                       -> case y of wild1 { Control.Driven.Internal.Types.InputSpec ds1 ds2 ds3 ds4 ->
                          case ds2 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                          case Control.Driven.Internal.Core.$w$slookup
                                 @ Control.Driven.Internal.Types.Backend
                                 ww1
                                 ww2
                                 ww3
                                 backendMap of wild2 {
                            GHC.Base.Nothing
                            -> GHC.Prim.raiseIO#
                                 @ GHC.Exception.SomeException
                                 @ (Data.HashMap.Base.HashMap
                                      Control.Driven.Internal.Types.InputName
                                      Control.Driven.Internal.Types.Input)
                                 (Control.Driven.Internal.Types.$fExceptionDrivenError_$ctoException
                                    (Control.Driven.Internal.Types.BackendNameNotFound ww))
                                 eta2
                            GHC.Base.Just backend
                            -> case backend of wild3 { Control.Driven.Internal.Types.Backend ds7 ds8 ->
                               case (ds7 emitEvent wild1)
                                      `cast`
                                    (GHC.Types.N:IO[0] <Control.Driven.Internal.Types.Input>_R)
                                      eta2 of ds9 { (#,#) ipv ipv1 ->
                               go2
                                 ys
                                 (case ipv1 of v2 { Control.Driven.Internal.Types.Input ipv2 ipv3 ipv4 ->
                                  case ds1 of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                                  Control.Driven.Internal.Core.$w$sinsert
                                    @ Control.Driven.Internal.Types.Input
                                    ww5
                                    ww6
                                    ww7
                                    v2
                                    eta1 } })
                                 ipv } } } } } }
                 } in
                 go2
                   inputSpecList
                   (Data.HashMap.Base.Empty
                      @ Control.Driven.Internal.Types.InputName
                      @ Control.Driven.Internal.Types.Input)
                   eta) -}
524ea219bebdaa3f2cc3bf74e1bde6dd
  createOutputMap ::
    (Control.Driven.Internal.Types.DrivenEvent -> GHC.Types.IO ())
    -> Data.HashMap.Base.HashMap
         Control.Driven.Internal.Types.BackendName
         Control.Driven.Internal.Types.Backend
    -> Data.HashMap.Base.HashMap
         Control.Driven.Internal.Types.InputName
         Control.Driven.Internal.Types.Input
    -> [Control.Driven.Internal.Types.OutputSpec]
    -> GHC.Types.IO
         (Data.HashMap.Base.HashMap
            Control.Driven.Internal.Types.OutputName
            Control.Driven.Internal.Types.Output)
  {- Arity: 5, Strictness: <L,U><L,U><L,U><S,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Control.Driven.Internal.Core.createOutputMap1
                  `cast`
                (<Control.Driven.Internal.Types.DrivenEvent -> GHC.Types.IO ()>_R
                 ->_R <Data.HashMap.Base.HashMap
                         Control.Driven.Internal.Types.BackendName
                         Control.Driven.Internal.Types.Backend>_R
                 ->_R <Data.HashMap.Base.HashMap
                         Control.Driven.Internal.Types.InputName
                         Control.Driven.Internal.Types.Input>_R
                 ->_R <[Control.Driven.Internal.Types.OutputSpec]>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.HashMap.Base.HashMap
                                  Control.Driven.Internal.Types.OutputName
                                  Control.Driven.Internal.Types.Output>_R)) -}
50511c45fbc0435db5df1958bb697508
  createOutputMap1 ::
    (Control.Driven.Internal.Types.DrivenEvent -> GHC.Types.IO ())
    -> Data.HashMap.Base.HashMap
         Control.Driven.Internal.Types.BackendName
         Control.Driven.Internal.Types.Backend
    -> Data.HashMap.Base.HashMap
         Control.Driven.Internal.Types.InputName
         Control.Driven.Internal.Types.Input
    -> [Control.Driven.Internal.Types.OutputSpec]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.HashMap.Base.HashMap
            Control.Driven.Internal.Types.OutputName
            Control.Driven.Internal.Types.Output #)
  {- Arity: 5, Strictness: <L,U><L,U><L,U><S,1*U><S,U>,
     Unfolding: (\ (emitEvent :: Control.Driven.Internal.Types.DrivenEvent
                                 -> GHC.Types.IO ())
                   (backendMap :: Data.HashMap.Base.HashMap
                                    Control.Driven.Internal.Types.BackendName
                                    Control.Driven.Internal.Types.Backend)
                   (inputMap :: Data.HashMap.Base.HashMap
                                  Control.Driven.Internal.Types.InputName
                                  Control.Driven.Internal.Types.Input)
                   (outputSpecList :: [Control.Driven.Internal.Types.OutputSpec])
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 letrec {
                   go2 :: [Control.Driven.Internal.Types.OutputSpec]
                          -> Data.HashMap.Base.HashMap
                               Control.Driven.Internal.Types.OutputName
                               Control.Driven.Internal.Types.Output
                          -> GHC.Prim.State# GHC.Prim.RealWorld
                          -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                Data.HashMap.Base.HashMap
                                  Control.Driven.Internal.Types.OutputName
                                  Control.Driven.Internal.Types.Output #)
                     {- Arity: 3, Strictness: <S,1*U><L,U><S,U> -}
                   = \ (ds :: [Control.Driven.Internal.Types.OutputSpec])
                       (eta1 :: Data.HashMap.Base.HashMap
                                  Control.Driven.Internal.Types.OutputName
                                  Control.Driven.Internal.Types.Output)
                       (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                     case ds of wild {
                       [] -> (# eta2, eta1 #)
                       : y ys
                       -> case y of wild1 { Control.Driven.Internal.Types.OutputSpec ds1 ds2 ds3 ds4 ->
                          case ds2 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                          case Control.Driven.Internal.Core.$w$slookup
                                 @ Control.Driven.Internal.Types.Backend
                                 ww1
                                 ww2
                                 ww3
                                 backendMap of wild2 {
                            GHC.Base.Nothing
                            -> GHC.Prim.raiseIO#
                                 @ GHC.Exception.SomeException
                                 @ (Data.HashMap.Base.HashMap
                                      Control.Driven.Internal.Types.OutputName
                                      Control.Driven.Internal.Types.Output)
                                 (Control.Driven.Internal.Types.$fExceptionDrivenError_$ctoException
                                    (Control.Driven.Internal.Types.BackendNameNotFound ww))
                                 eta2
                            GHC.Base.Just backend
                            -> case backend of wild3 { Control.Driven.Internal.Types.Backend ds7 ds8 ->
                               case (ds8 emitEvent inputMap wild1)
                                      `cast`
                                    (GHC.Types.N:IO[0] <Control.Driven.Internal.Types.Output>_R)
                                      eta2 of ds9 { (#,#) ipv ipv1 ->
                               go2
                                 ys
                                 (case ipv1 of v2 { Control.Driven.Internal.Types.Output ipv2 ipv3 ->
                                  case ds1 of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                                  Control.Driven.Internal.Core.$w$sinsert
                                    @ Control.Driven.Internal.Types.Output
                                    ww5
                                    ww6
                                    ww7
                                    v2
                                    eta1 } })
                                 ipv } } } } } }
                 } in
                 go2
                   outputSpecList
                   (Data.HashMap.Base.Empty
                      @ Control.Driven.Internal.Types.OutputName
                      @ Control.Driven.Internal.Types.Output)
                   eta) -}
9ce77ae2573e7810da2d4457808fd434
  createSchemaMap ::
    [Control.Driven.Internal.Types.SchemaSpec]
    -> Data.HashMap.Base.HashMap
         Control.Driven.Internal.Types.EventName
         Control.Driven.Internal.Types.EventSpec
    -> GHC.Types.IO
         (Data.HashMap.Base.HashMap
            Control.Driven.Internal.Types.EventName
            Control.Driven.Internal.Types.Schema)
  {- Arity: 3, Strictness: <L,U><S,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Control.Driven.Internal.Core.createSchemaMap1
                  `cast`
                (<[Control.Driven.Internal.Types.SchemaSpec]>_R
                 ->_R <Data.HashMap.Base.HashMap
                         Control.Driven.Internal.Types.EventName
                         Control.Driven.Internal.Types.EventSpec>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.HashMap.Base.HashMap
                                  Control.Driven.Internal.Types.EventName
                                  Control.Driven.Internal.Types.Schema>_R)) -}
10b8f0b6432f15933c4f6bc5a6c21433
  createSchemaMap1 ::
    [Control.Driven.Internal.Types.SchemaSpec]
    -> Data.HashMap.Base.HashMap
         Control.Driven.Internal.Types.EventName
         Control.Driven.Internal.Types.EventSpec
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.HashMap.Base.HashMap
            Control.Driven.Internal.Types.EventName
            Control.Driven.Internal.Types.Schema #)
  {- Arity: 3, Strictness: <L,U><S,1*U><S,U>,
     Unfolding: (\ (schemaSpecList :: [Control.Driven.Internal.Types.SchemaSpec])
                   (eventSpecMap :: Data.HashMap.Base.HashMap
                                      Control.Driven.Internal.Types.EventName
                                      Control.Driven.Internal.Types.EventSpec)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 letrec {
                   go2 :: [(Control.Driven.Internal.Types.EventName,
                            Control.Driven.Internal.Types.EventSpec)]
                          -> Data.HashMap.Base.HashMap
                               Control.Driven.Internal.Types.EventName
                               Control.Driven.Internal.Types.Schema
                          -> GHC.Prim.State# GHC.Prim.RealWorld
                          -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                Data.HashMap.Base.HashMap
                                  Control.Driven.Internal.Types.EventName
                                  Control.Driven.Internal.Types.Schema #)
                     {- Arity: 3, Strictness: <S,1*U><L,U><S,U> -}
                   = \ (ds :: [(Control.Driven.Internal.Types.EventName,
                                Control.Driven.Internal.Types.EventSpec)])
                       (eta1 :: Data.HashMap.Base.HashMap
                                  Control.Driven.Internal.Types.EventName
                                  Control.Driven.Internal.Types.Schema)
                       (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                     case ds of wild {
                       [] -> (# eta2, eta1 #)
                       : y ys
                       -> case y of wild1 { (,) evName eventSpec ->
                          letrec {
                            go3 :: [Control.Driven.Internal.Types.EventSpec
                                    -> GHC.Types.IO
                                         (GHC.Base.Maybe Control.Driven.Internal.Types.Schema)]
                                   -> GHC.Prim.State# GHC.Prim.RealWorld
                                   -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                         [GHC.Base.Maybe Control.Driven.Internal.Types.Schema] #)
                              {- Arity: 2, Strictness: <S,1*U><S,U> -}
                            = \ (ds1 :: [Control.Driven.Internal.Types.EventSpec
                                         -> GHC.Types.IO
                                              (GHC.Base.Maybe
                                                 Control.Driven.Internal.Types.Schema)])
                                (eta4 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                              case ds1 of wild2 {
                                []
                                -> (# eta4,
                                      GHC.Types.[]
                                        @ (GHC.Base.Maybe Control.Driven.Internal.Types.Schema) #)
                                : y1 ys1
                                -> case (y1 eventSpec)
                                          `cast`
                                        (GHC.Types.N:IO[0]
                                             <GHC.Base.Maybe
                                                Control.Driven.Internal.Types.Schema>_R)
                                          eta4 of ds2 { (#,#) ipv ipv1 ->
                                   case go3 ys1 ipv of ds3 { (#,#) ipv2 ipv3 ->
                                   (# ipv2,
                                      GHC.Types.:
                                        @ (GHC.Base.Maybe Control.Driven.Internal.Types.Schema)
                                        ipv1
                                        ipv3 #) } } }
                          } in
                          case go3 schemaSpecList eta2 of ds1 { (#,#) ipv ipv1 ->
                          case (Data.Maybe.catMaybes1
                                  @ Control.Driven.Internal.Types.Schema
                                  ipv1)
                                 `cast`
                               ([Sub (Sym (GHC.Exts.D:R:Item[][0]
                                               <Data.ByteString.Internal.ByteString
                                                -> Data.Either.Either
                                                     GHC.Exception.SomeException
                                                     ()>_N))])_R of wild2 {
                            []
                            -> GHC.Prim.raiseIO#
                                 @ GHC.Exception.SomeException
                                 @ (Data.HashMap.Base.HashMap
                                      Control.Driven.Internal.Types.EventName
                                      Control.Driven.Internal.Types.Schema)
                                 (Control.Driven.Internal.Types.$fExceptionDrivenError_$ctoException
                                    (Control.Driven.Internal.Types.InvalidSchemaTypeForEvent
                                       evName
                                       (Control.Driven.Internal.Types.esSchema eventSpec)))
                                 ipv
                            : ipv2 ipv3
                            -> go2
                                 ys
                                 (case ipv2
                                         `cast`
                                       (Sub (GHC.Exts.D:R:Item[][0]
                                                 <Data.ByteString.Internal.ByteString
                                                  -> Data.Either.Either
                                                       GHC.Exception.SomeException
                                                       ()>_N)) of v2 { DEFAULT ->
                                  case evName of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                                  Control.Driven.Internal.Core.$w$sinsert
                                    @ (Data.ByteString.Internal.ByteString
                                       -> Data.Either.Either GHC.Exception.SomeException ())
                                    ww1
                                    ww2
                                    ww3
                                    v2
                                    eta1 } })
                                 ipv } } } }
                 } in
                 go2
                   (Data.HashMap.Base.toList
                      @ Control.Driven.Internal.Types.EventName
                      @ Control.Driven.Internal.Types.EventSpec
                      eventSpecMap)
                   (Data.HashMap.Base.Empty
                      @ Control.Driven.Internal.Types.EventName
                      @ Control.Driven.Internal.Types.Schema)
                   eta) -}
89fcdd6b8a484f9b75796a4655953859
  createWorkersPerEvent ::
    (Control.Driven.Internal.Types.DrivenEvent -> GHC.Types.IO ())
    -> Data.HashMap.Base.HashMap
         Control.Driven.Internal.Types.EventName
         Control.Driven.Internal.Types.EventSpec
    -> Data.HashMap.Base.HashMap
         Control.Driven.Internal.Types.EventName
         Control.Driven.Internal.Types.Schema
    -> Data.HashMap.Base.HashMap
         Control.Driven.Internal.Types.InputName
         Control.Driven.Internal.Types.Input
    -> Data.HashMap.Base.HashMap
         Control.Driven.Internal.Types.EventName
         (Control.Driven.Internal.Types.EventSpec,
          [Control.Driven.Internal.Types.Output])
    -> Data.HashMap.Base.HashMap
         Control.Driven.Internal.Types.EventName
         [Control.Driven.Internal.Types.SomeEventHandler]
    -> GHC.Types.IO
         (Data.HashMap.Base.HashMap
            Control.Driven.Internal.Types.EventName
            [Control.Driven.Internal.Types.Worker])
  {- Arity: 7, Strictness: <L,U><S,1*U><L,U><L,U><L,U><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Control.Driven.Internal.Core.createWorkersPerEvent1
                  `cast`
                (<Control.Driven.Internal.Types.DrivenEvent -> GHC.Types.IO ()>_R
                 ->_R <Data.HashMap.Base.HashMap
                         Control.Driven.Internal.Types.EventName
                         Control.Driven.Internal.Types.EventSpec>_R
                 ->_R <Data.HashMap.Base.HashMap
                         Control.Driven.Internal.Types.EventName
                         Control.Driven.Internal.Types.Schema>_R
                 ->_R <Data.HashMap.Base.HashMap
                         Control.Driven.Internal.Types.InputName
                         Control.Driven.Internal.Types.Input>_R
                 ->_R <Data.HashMap.Base.HashMap
                         Control.Driven.Internal.Types.EventName
                         (Control.Driven.Internal.Types.EventSpec,
                          [Control.Driven.Internal.Types.Output])>_R
                 ->_R <Data.HashMap.Base.HashMap
                         Control.Driven.Internal.Types.EventName
                         [Control.Driven.Internal.Types.SomeEventHandler]>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.HashMap.Base.HashMap
                                  Control.Driven.Internal.Types.EventName
                                  [Control.Driven.Internal.Types.Worker]>_R)) -}
372b77ee5a9f4b6e9c5b5e236650a5a4
  createWorkersPerEvent1 ::
    (Control.Driven.Internal.Types.DrivenEvent -> GHC.Types.IO ())
    -> Data.HashMap.Base.HashMap
         Control.Driven.Internal.Types.EventName
         Control.Driven.Internal.Types.EventSpec
    -> Data.HashMap.Base.HashMap
         Control.Driven.Internal.Types.EventName
         Control.Driven.Internal.Types.Schema
    -> Data.HashMap.Base.HashMap
         Control.Driven.Internal.Types.InputName
         Control.Driven.Internal.Types.Input
    -> Data.HashMap.Base.HashMap
         Control.Driven.Internal.Types.EventName
         (Control.Driven.Internal.Types.EventSpec,
          [Control.Driven.Internal.Types.Output])
    -> Data.HashMap.Base.HashMap
         Control.Driven.Internal.Types.EventName
         [Control.Driven.Internal.Types.SomeEventHandler]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.HashMap.Base.HashMap
            Control.Driven.Internal.Types.EventName
            [Control.Driven.Internal.Types.Worker] #)
  {- Arity: 7, Strictness: <L,U><S,1*U><L,U><L,U><L,U><L,U><S,U>,
     Unfolding: (\ (emitEvent :: Control.Driven.Internal.Types.DrivenEvent
                                 -> GHC.Types.IO ())
                   (eventSpecMap :: Data.HashMap.Base.HashMap
                                      Control.Driven.Internal.Types.EventName
                                      Control.Driven.Internal.Types.EventSpec)
                   (schemaMap :: Data.HashMap.Base.HashMap
                                   Control.Driven.Internal.Types.EventName
                                   Control.Driven.Internal.Types.Schema)
                   (inputMap :: Data.HashMap.Base.HashMap
                                  Control.Driven.Internal.Types.InputName
                                  Control.Driven.Internal.Types.Input)
                   (outputPerEvent :: Data.HashMap.Base.HashMap
                                        Control.Driven.Internal.Types.EventName
                                        (Control.Driven.Internal.Types.EventSpec,
                                         [Control.Driven.Internal.Types.Output]))
                   (eventHandlers :: Data.HashMap.Base.HashMap
                                       Control.Driven.Internal.Types.EventName
                                       [Control.Driven.Internal.Types.SomeEventHandler])
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 let {
                   lvl5 :: Control.Driven.Internal.Types.WorkerMsg
                           -> GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                     {- Arity: 2 -}
                   = Control.Driven.Internal.Worker.workerHandler1
                       schemaMap
                       eventHandlers
                 } in
                 letrec {
                   go2 :: [(Control.Driven.Internal.Types.EventName,
                            Control.Driven.Internal.Types.EventSpec)]
                          -> GHC.Prim.State# GHC.Prim.RealWorld
                          -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                [(Control.Driven.Internal.Types.EventName,
                                  [Control.Driven.Internal.Types.Worker])] #)
                     {- Arity: 2, Strictness: <S,1*U><S,U> -}
                   = \ (ds :: [(Control.Driven.Internal.Types.EventName,
                                Control.Driven.Internal.Types.EventSpec)])
                       (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                     case ds of wild {
                       []
                       -> (# eta1,
                             GHC.Types.[]
                               @ (Control.Driven.Internal.Types.EventName,
                                  [Control.Driven.Internal.Types.Worker]) #)
                       : y ys
                       -> case y of wild1 { (,) evName evSpec ->
                          letrec {
                            go3 :: [Control.Driven.Internal.Types.WorkerSpec]
                                   -> GHC.Prim.State# GHC.Prim.RealWorld
                                   -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                         [Control.Driven.Internal.Types.Worker] #)
                              {- Arity: 2, Strictness: <S,1*U><S,U> -}
                            = \ (ds1 :: [Control.Driven.Internal.Types.WorkerSpec])
                                (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                              case ds1 of wild2 {
                                []
                                -> (# eta2, GHC.Types.[] @ Control.Driven.Internal.Types.Worker #)
                                : y1 ys1
                                -> case y1 of ww { Control.Driven.Internal.Types.WorkerSpec ww1 ww2 ww3 ->
                                   case ww1 of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                                   case ww3 of ww8 { GHC.Types.I# ww9 ->
                                   case Control.Driven.Internal.Worker.$wcreateWorker
                                          emitEvent
                                          evName
                                          evSpec
                                          ww5
                                          ww6
                                          ww7
                                          ww9
                                          inputMap
                                          outputPerEvent
                                          lvl5
                                            `cast`
                                          (<Control.Driven.Internal.Types.WorkerMsg>_R
                                           ->_R Sym (GHC.Types.N:IO[0] <()>_R))
                                          eta2 of ds2 { (#,#) ipv ipv1 ->
                                   case go3 ys1 ipv of ds3 { (#,#) ipv2 ipv3 ->
                                   (# ipv2,
                                      GHC.Types.:
                                        @ Control.Driven.Internal.Types.Worker
                                        ipv1
                                        ipv3 #) } } } } } }
                          } in
                          case go3
                                 (Control.Driven.Internal.Types.esWorkerSpecs evSpec)
                                 eta1 of ds1 { (#,#) ipv ipv1 ->
                          case go2 ys ipv of ds2 { (#,#) ipv2 ipv3 ->
                          (# ipv2,
                             GHC.Types.:
                               @ (Control.Driven.Internal.Types.EventName,
                                  [Control.Driven.Internal.Types.Worker])
                               (evName, ipv1)
                               ipv3 #) } } } }
                 } in
                 case go2
                        (Control.Driven.Internal.Core.createWorkersPerEvent_go1
                           (GHC.Types.[]
                              @ (Control.Driven.Internal.Types.EventName,
                                 Control.Driven.Internal.Types.EventSpec))
                           eventSpecMap)
                        eta of ds1 { (#,#) ipv ipv1 ->
                 (# ipv,
                    Control.Driven.Internal.Core.$sfromList
                      @ [Control.Driven.Internal.Types.Worker]
                      ipv1 #) }) -}
5637540edbe0428b849a94fc878f1f3a
  createWorkersPerEvent_go1 ::
    [(Control.Driven.Internal.Types.EventName,
      Control.Driven.Internal.Types.EventSpec)]
    -> Data.HashMap.Base.HashMap
         Control.Driven.Internal.Types.EventName
         Control.Driven.Internal.Types.EventSpec
    -> [(Control.Driven.Internal.Types.EventName,
         Control.Driven.Internal.Types.EventSpec)]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U> -}
d1e073283f314f121f7a9e427eb81c6e
  runtimeEventWorkers ::
    Control.Driven.Internal.Core.DrivenRuntime
    -> Data.HashMap.Base.HashMap
         Control.Driven.Internal.Types.EventName
         [Control.Driven.Internal.Types.Worker]
  RecSel Left Control.Driven.Internal.Core.DrivenRuntime
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Control.Driven.Internal.Core.DrivenRuntime) ->
                 case ds of wild { Control.Driven.Internal.Core.DrivenRuntime ds1 ds2 ds3 ->
                 ds3 }) -}
0d21b8739b7ff9f4a39d6895b29e2c2d
  runtimeInputs ::
    Control.Driven.Internal.Core.DrivenRuntime
    -> Data.HashMap.Base.HashMap
         Control.Driven.Internal.Types.InputName
         Control.Driven.Internal.Types.Input
  RecSel Left Control.Driven.Internal.Core.DrivenRuntime
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLL),1*U(1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Control.Driven.Internal.Core.DrivenRuntime) ->
                 case ds of wild { Control.Driven.Internal.Core.DrivenRuntime ds1 ds2 ds3 ->
                 ds1 }) -}
3424a5a773f9494861afacdda20180ac
  runtimeOutputs ::
    Control.Driven.Internal.Core.DrivenRuntime
    -> Data.HashMap.Base.HashMap
         Control.Driven.Internal.Types.OutputName
         Control.Driven.Internal.Types.Output
  RecSel Left Control.Driven.Internal.Core.DrivenRuntime
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Control.Driven.Internal.Core.DrivenRuntime) ->
                 case ds of wild { Control.Driven.Internal.Core.DrivenRuntime ds1 ds2 ds3 ->
                 ds2 }) -}
491628c5d5e52a2bfa8136040339f86f
  startSystem ::
    Control.Driven.Internal.Types.DrivenConfig
    -> (Control.Driven.Internal.Types.DrivenEvent -> GHC.Types.IO ())
    -> Data.HashMap.Base.HashMap
         Data.Text.Internal.Text Control.Driven.Internal.Types.Backend
    -> [Control.Driven.Internal.Types.SchemaSpec]
    -> Data.HashMap.Base.HashMap
         Control.Driven.Internal.Types.EventName
         [Control.Driven.Internal.Types.SomeEventHandler]
    -> GHC.Types.IO Control.Driven.Internal.Core.DrivenRuntime
  {- Arity: 6,
     Strictness: <S(LSL),U(1*U,1*U,1*U)><L,U><L,U><L,U><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Control.Driven.Internal.Core.startSystem1
                  `cast`
                (<Control.Driven.Internal.Types.DrivenConfig>_R
                 ->_R <Control.Driven.Internal.Types.DrivenEvent
                       -> GHC.Types.IO ()>_R
                 ->_R <Data.HashMap.Base.HashMap
                         Data.Text.Internal.Text Control.Driven.Internal.Types.Backend>_R
                 ->_R <[Control.Driven.Internal.Types.SchemaSpec]>_R
                 ->_R <Data.HashMap.Base.HashMap
                         Control.Driven.Internal.Types.EventName
                         [Control.Driven.Internal.Types.SomeEventHandler]>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Control.Driven.Internal.Core.DrivenRuntime>_R)) -}
a2175e1ffb00dff929f9549996bb5098
  startSystem1 ::
    Control.Driven.Internal.Types.DrivenConfig
    -> (Control.Driven.Internal.Types.DrivenEvent -> GHC.Types.IO ())
    -> Data.HashMap.Base.HashMap
         Data.Text.Internal.Text Control.Driven.Internal.Types.Backend
    -> [Control.Driven.Internal.Types.SchemaSpec]
    -> Data.HashMap.Base.HashMap
         Control.Driven.Internal.Types.EventName
         [Control.Driven.Internal.Types.SomeEventHandler]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Control.Driven.Internal.Core.DrivenRuntime #)
  {- Arity: 6,
     Strictness: <S(LSL),U(1*U,1*U,1*U)><L,U><L,U><L,U><L,U><S,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, False)
                (\ (w :: Control.Driven.Internal.Types.DrivenConfig)
                   (w1 :: Control.Driven.Internal.Types.DrivenEvent
                          -> GHC.Types.IO ())
                   (w2 :: Data.HashMap.Base.HashMap
                            Data.Text.Internal.Text Control.Driven.Internal.Types.Backend)
                   (w3 :: [Control.Driven.Internal.Types.SchemaSpec])
                   (w4 :: Data.HashMap.Base.HashMap
                            Control.Driven.Internal.Types.EventName
                            [Control.Driven.Internal.Types.SomeEventHandler])
                   (w5 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case w of ww { Control.Driven.Internal.Types.DrivenConfig ww1 ww2 ww3 ->
                 Control.Driven.Internal.Core.$wstartSystem
                   ww1
                   ww2
                   ww3
                   w1
                   w2
                   w3
                   w4
                   w5 }) -}
ad777905461f3fac123f93e549addd7b
  startSystem2 ::
    Data.HashMap.Base.HashMap
      Data.Text.Internal.Text Control.Driven.Internal.Types.Backend
  {- Unfolding: (Data.HashMap.Base.fromList
                   @ Data.Text.Internal.Text
                   @ Control.Driven.Internal.Types.Backend
                   Data.Text.$fEqText
                   Data.Hashable.Class.$fHashableText0
                   Control.Driven.Internal.Core.startSystem3
                     `cast`
                   ([Sub (Data.HashMap.Base.D:R:ItemHashMap[0]
                              <Control.Driven.Internal.Types.Backend>_N
                              <Data.Text.Internal.Text>_N)])_R) -}
c3a7a46c66c1b7d77d7b481345e56eda
  startSystem3 ::
    [GHC.Exts.Item
       (Data.HashMap.Base.HashMap
          Data.Text.Internal.Text Control.Driven.Internal.Types.Backend)]
  {- Unfolding: (GHC.Types.:
                   @ (GHC.Exts.Item
                        (Data.HashMap.Base.HashMap
                           Data.Text.Internal.Text Control.Driven.Internal.Types.Backend))
                   Control.Driven.Internal.Core.startSystem4
                     `cast`
                   (Sub (Sym (Data.HashMap.Base.D:R:ItemHashMap[0]
                                  <Control.Driven.Internal.Types.Backend>_N
                                  <Data.Text.Internal.Text>_N)))
                   (GHC.Types.[]
                      @ (GHC.Exts.Item
                           (Data.HashMap.Base.HashMap
                              Data.Text.Internal.Text
                              Control.Driven.Internal.Types.Backend)))) -}
e463ac6a51b44335595ba3a8adcabd1b
  startSystem4 ::
    (Data.Text.Internal.Text, Control.Driven.Internal.Types.Backend)
  {- Unfolding: ((Control.Driven.Internal.Core.startSystem5,
                  Control.Driven.Internal.Backend.Memory.memoryBackend)) -}
2279678f8495bc45ae420b31e748c217
  startSystem5 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "memory_queue"#) -}
b5cbba28a21e8c6a4b43e6e0f10b3c7a
  stopSystem ::
    Control.Driven.Internal.Core.DrivenRuntime -> GHC.Types.IO ()
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLL),1*U(1*U,1*U,1*U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Control.Driven.Internal.Core.stopSystem1
                  `cast`
                (<Control.Driven.Internal.Core.DrivenRuntime>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
000a43b61d6e4f25f875ed1a391f5e02
  stopSystem1 ::
    Control.Driven.Internal.Core.DrivenRuntime
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLL),1*U(1*U,1*U,1*U)><S,U>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Control.Driven.Internal.Core.DrivenRuntime)
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case w of ww { Control.Driven.Internal.Core.DrivenRuntime ww1 ww2 ww3 ->
                 Control.Driven.Internal.Core.$wstopSystem ww1 ww2 ww3 w1 }) -}
edc1a705fcdba114f21ad25e083d7d07
  stopSystem2 ::
    GHC.Types.IO ()
    -> Data.HashMap.Base.HashMap
         Control.Driven.Internal.Types.EventName
         [Control.Driven.Internal.Types.Worker]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(U(U,U))><S,1*U><S,U> -}
251cd73336e8d44ea6c8bd49169d4623
  stopSystem3 ::
    GHC.Types.IO ()
    -> Data.HashMap.Base.HashMap
         Control.Driven.Internal.Types.OutputName
         Control.Driven.Internal.Types.Output
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(U(U,U))><S,1*U><S,U> -}
4b10575205daa70fcc4aa14d0a47cb1f
  stopSystem4 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 (# s, GHC.Tuple.() #)) -}
e79886c26a72f63de147ae80ccc8f950
  stopSystem5 ::
    GHC.Types.IO ()
    -> Data.HashMap.Base.HashMap
         Control.Driven.Internal.Types.InputName
         Control.Driven.Internal.Types.Input
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(U(U,U))><S,1*U><S,U> -}
"SC:$wpoly_go10" [0] forall @ v
                            (sc :: GHC.Prim.Word#)
                            (sc1 :: GHC.Prim.Array#
                                      (Data.HashMap.Base.HashMap Data.Text.Internal.Text v))
                            (sc2 :: GHC.Prim.Int#)
                            (sc3 :: v)
                            (sc4 :: GHC.Prim.Int#)
                            (sc5 :: GHC.Prim.Int#)
                            (sc6 :: GHC.Prim.ByteArray#)
                            (sc7 :: GHC.Prim.Word#)
  Control.Driven.Internal.Core.$wpoly_go4 @ v
                                          sc7
                                          sc6
                                          sc5
                                          sc4
                                          sc3
                                          sc2
                                          (Data.HashMap.Base.BitmapIndexed
                                             @ Control.Driven.Internal.Types.EventName
                                             @ v
                                             sc
                                             sc1)
  = Control.Driven.Internal.Core.$sinsert_$s$wpoly_go1
      @ v
      sc
      sc1
      sc2
      sc3
      sc4
      sc5
      sc6
      sc7
"SC:$wpoly_go10" [0] forall @ v
                            @ s
                            (sc :: GHC.Prim.State# s)
                            (sc1 :: GHC.Prim.Word#)
                            (sc2 :: GHC.Prim.Array#
                                      (Data.HashMap.Base.HashMap Data.Text.Internal.Text v))
                            (sc3 :: GHC.Prim.Int#)
                            (sc4 :: v)
                            (sc5 :: GHC.Prim.Int#)
                            (sc6 :: GHC.Prim.Int#)
                            (sc7 :: GHC.Prim.ByteArray#)
                            (sc8 :: GHC.Prim.Word#)
  Control.Driven.Internal.Core.$wpoly_go6 @ s
                                          @ v
                                          sc8
                                          sc7
                                          sc6
                                          sc5
                                          sc4
                                          sc3
                                          (Data.HashMap.Base.BitmapIndexed
                                             @ Control.Driven.Internal.Types.EventName
                                             @ v
                                             sc1
                                             sc2)
                                          sc
  = Control.Driven.Internal.Core.$sunsafeInsert_$s$wpoly_go1
      @ v
      @ s
      sc
      sc1
      sc2
      sc3
      sc4
      sc5
      sc6
      sc7
      sc8
"SPEC/Control.Driven.Internal.Core $wupdateOrConcatWithKey @ Text _" [0] forall @ v
                                                                                (w :: GHC.Classes.Eq
                                                                                        Data.Text.Internal.Text)
  Data.HashMap.Base.$wupdateOrConcatWithKey @ Data.Text.Internal.Text
                                            @ v
                                            w
  = Control.Driven.Internal.Core.$s$wupdateOrConcatWithKey @ v
"SPEC/Control.Driven.Internal.Core fromList @ EventName _" [ALWAYS] forall @ v
                                                                           ($dHashable :: Data.Hashable.Class.Hashable
                                                                                            Control.Driven.Internal.Types.EventName)
                                                                           ($dEq :: GHC.Classes.Eq
                                                                                      Control.Driven.Internal.Types.EventName)
  Data.HashMap.Strict.fromList @ Data.Text.Internal.Text
                               @ v
                               $dEq
                               $dHashable
  = Control.Driven.Internal.Core.$sfromList @ v
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

